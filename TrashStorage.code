.globl	constructor
.public	constructor
.type	constructor, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7_with_init_storage$
}
IF
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
; Decode input parameters
ENDS
; modifier accept
ACCEPT
; constructor TrashStorage
; end constructor TrashStorage
; end modifier accept
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	save1KB
.public	save1KB
.type	save1KB, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
ENDS
; modifier accept
ACCEPT
; function save1KB
;; get member length
;; push identifier _numbers
GETGLOB 10
FIRST
CALL $_getRandom_internal$
;; decl: random
;; push identifier _numbers
GETGLOB 10
;; decl: numbers
; for
PUSHINT 0
;; decl: i
PUSHCONT {
	;; push identifier i
	DUP
	LESSINT 32
}
PUSHCONT {
	;; push identifier random
	PUSH S2
	;; push identifier i
	PUSH S1
	;; +
	ADD
	;; decl: number
	; expValue
	PUSH S2
	; end expValue
	;; push identifier number
	PUSH S1
	;; array.push(..)
	NEWC
	STU 256
	SWAP
	UNPAIR
	PUSH S1
	INC
	XCHG s3
	ROTREV
	PUSHINT 32
	DICTUSETB
	PAIR
	; colValue
	POP s3
	; end colValue
	DROP
	;; ++
	; expValue
	; end expValue
	INC
	; colValue
	; end colValue
}
WHILE
DROP
; end for
; expValue
; end expValue
;; push identifier numbers
DUP
; colValue
SETGLOB 10
; end colValue
DROP2
; end function save1KB
; end modifier accept
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	info
.public	info
.type	info, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
ENDS
; function info
;; ret param: balance
PUSHINT 0
;; ret param: kiloBytes
PUSHINT 0
;; return
;; get member balance
GETPARAM 7
INDEX 0
;; get member length
;; push identifier _numbers
GETGLOB 10
FIRST
PUSHINT 32
;; /
DIV
BLKDROP2 2, 2
;; emitting 2 value(s)
PUSH S2
EQINT -1
PUSHCONT {
	PUSH S4
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xd86865d7
	PUSH S2
	STUR 128
	PUSH S1
	STUR 256
	ENDC
	PUSHINT 1
	SENDRAWMSG
}
IF
DROP2
; end function info
PUSHCONT {
	CALL $c7_to_c4$
}
IF
TRUE
SETGLOB 7

.globl	info_internal
.type	info_internal, @function
; function info
;; ret param: balance
PUSHINT 0
;; ret param: kiloBytes
PUSHINT 0
;; return
;; get member balance
GETPARAM 7
INDEX 0
;; get member length
;; push identifier _numbers
GETGLOB 10
FIRST
PUSHINT 32
;; /
DIV
BLKDROP2 2, 2
; end function info

.globl	_getRandom_internal
.type	_getRandom_internal, @function
;; param: salt
; function _getRandom
NEWC
;; decl: builder
; expValue
DUP
; end expValue
CALL $get_rand_seed_macro$
STUR 256
;; push identifier now
NOW
STUR 32
;; push identifier salt
PUSH S2
STUR 256
; colValue
NIP
; end colValue
;; return
;; push identifier builder
DUP
ENDC
HASHCU
NIP
NIP
; end function _getRandom

.globl	c7_to_c4
.type	c7_to_c4, @function
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
GETGLOB 10
UNTUPLE 2
XCHG s2
STU 32
STDICT
ENDC
POP C4

.globl	c4_to_c7
.type	c4_to_c7, @function
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDU 32
PLDDICT
PAIR
SETGLOB 10
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDU 32
	PLDDICT
	PAIR
	SETGLOB 10
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init _numbers
	PUSHINT 0
	NEWDICT
	PAIR
	SETGLOB 10
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
}
IFELSE

.internal-alias :main_internal,        0
.internal	:main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
PUSHINT 0  ; main_external trans id
PUSH S2
CTOS
PLDU 4
MODPOW2 1
IFRET
PUSH S1    ; body
SEMPTY     ; isEmpty
IFRET
PUSH S1 ; body
LDU 32  ; funcId body'
PUSH S1 ; funcId body' funcId
IFNOTRET
PUSH S1 ; funcId body' funcId
LESSINT 3            ; funcId body' funcId<3
PUSH S2              ; funcId body' funcId<3 funcId
PUSHINT 4294967293   ; funcId body' funcId<3 funcId 4294967293
GREATER              ; funcId body' funcId<3 funcId>4294967293
OR                   ; funcId body' funcId<3||funcId>4294967293
PUSHCONT {
	DROP2
	THROW 60
}
IFJMP
SWAP    ; body funcId
CALL 1
GETGLOB 7
ISNULL
PUSHCONT {
	DROP
	THROW 60
}
IF

.internal-alias :main_external,        -1
.internal	:main_external
PUSHINT -1 ; main_external trans id
PUSH S1
CALL $c4_to_c7_with_init_storage$
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	ROT
	GETGLOB 2
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
IF
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU  32 ; funcId body
PUSH S1 ; funcId body funcId
LESSINT 3            ; funcId body' funcId<3
PUSH S2              ; funcId body' funcId<3 funcId
PUSHINT 4294967293   ; funcId body' funcId<3 funcId 4294967293
GREATER              ; funcId body' funcId<3 funcId>4294967293
OR                   ; funcId body' funcId<3||funcId>4294967293
PUSHCONT {
	DROP2
	THROW 60
}
IFJMP
SWAP    ; body funcId
CALL 1
GETGLOB 7
ISNULL
PUSHCONT {
	DROP
	THROW 60
}
IF

